version: '3.8' # docker compose version ==> https://docs.docker.com/compose/compose-file/
networks:
  default:
    name: goals6
services:
  ## services ==> containers ==> all services define in one compose file that already will be the part of same network
  mongodbContainer6: 
    image: 'mongo'
    volumes:
      - mongoData6:/data/db # named volume
    container_name: mongodbContainer6         # container Name
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: max
    #   MONGO_INITDB_ROOT_PASSWORD: secret
    #   # - MONGO_INITDB_ROOT_USERNAME=max
    #   # - MONGO_INITDB_ROOT_PASSWORD=secret
    env_file:
      - ./env/mongo.env
    # networks:
    #   - goals-net

  backend6:
    build:
      context: ./backend          # folder path
      dockerfile: Dockerfile      # dockerFileName
      target: development
    #   args:                       # argument list
    #     - some-arg=1
    ports:
      - '30461:80'                     # HOST_PORT:CONTAINER_INTERNAL_PORT
    volumes:
      - backendLogs6:/app/logs              # named volumes
      - ./backend:/app              # bindMount 
      - /app/node_modules           # anonymous volume
    env_file:
      - ./env/backend.env
    depends_on:
      - mongodbContainer6


  backend_production6:
    build:
      context: ./backend          # folder path
      dockerfile: Dockerfile      # dockerFileName
      target: production
    #   args:                       # argument list
    #     - some-arg=1
    ports:
      - '30462:82'                     # HOST_PORT:CONTAINER_INTERNAL_PORT
    volumes:
      - backendProductionLogs6:/app/logs              # named volumes
    env_file:
      - ./env/backend.env
    depends_on:
      - mongodbContainer6

# react app for dev env
  frontend6:
    # build: ./frontend
    build:
      context: ./frontend               # folder path
      dockerfile: Dockerfile            # dockerFileName
      args:
        REACT_APP_ENV_TITLE: ${REACT_APP_ENV_TITLE_DEV}
        REACT_APP_BASE_URL: ${REACT_APP_BASE_URL_DEV}
    ports:
      - '30463:3000'
    volumes:
      - ./frontend/src:/app/src     # bindMount
    env_file:
      - ./env/frontend.env   
    stdin_open: true                # this service/container need open input connection
    tty: true                       # attaching to terminal
    depends_on:
      - backend6

# react app for prod env
  frontend_production6:
    build:
      context: ./frontend               # folder path
      dockerfile: Dockerfile.prod       # dockerFileName
      args:
        REACT_APP_ENV_TITLE: ${REACT_APP_ENV_TITLE_PROD}
        REACT_APP_BASE_URL: ${REACT_APP_BASE_URL_PROD}
    ports:
      - '30464:80'
    # env_file:
    #   - ./env/frontendProd.env
    depends_on:
    - backend_production6    
  

volumes: ## specified named volume list => same level as services
  mongoData6:
  backendLogs6:
  backendProductionLogs6: